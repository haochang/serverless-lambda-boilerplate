service: stories

package:
  exclude:
    - '*.md'
    - '.env*'
    - .serverless/**

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${env:STAGE}
  region: us-east-1
  httpApi:
    # authorizers:
    #   serviceAuthorizer:
    #     identitySource: $request.header.Authorization
    #     issuerUrl: https://cognito-idp.us-west-2.amazonaws.com/${env:COGNITO_USERPOOL_ID}
    #     audience: ${env:COGNITO_USERPOOL_CLIENT_ID}
    cors:
      allowedOrigins: '*'
      allowedHeaders:
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
      allowCredentials: false
      maxAge: 600 # In seconds
  stackTags:
    role: ${self:custom.prefix}
    application_type: serverless
  environment:

  iamManagedPolicies:
    - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

functions:
  stories:
    handler: src/stories.handleGet
    role: LambdaElasticSearchAccessRole
    events:
      - httpApi:
          path: /stories
          method: get
          # authorizer: serviceAuthorizer
    layers:
      - { Ref: NodeModulesLambdaLayer }
    environment:
      ELASTICSEARCH_ENDPOINT: !GetAtt ElasticsearchDomain.DomainEndpoint

layers:
  NodeModules:
    path: layers
    name: ${self:custom.prefix}-NodeModules
    description: Lambda layer containing node modules
    compatibleRuntimes:
      - nodejs8.10
    allowedAccounts:
      - '*'

custom:
  stage: ${opt:stage, self:provider.stage}
  prefix: ${self:service}-${self:custom.stage}
  serverless-offline:
    httpPort: 4000

resources:
  Description: Stories stack
  Resources:
    LambdaElasticSearchAccessRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: ElasticsearchPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: 'es:*'
                  Resource:
                    - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/stories/*'
    ElasticsearchDomain:
      Type: AWS::Elasticsearch::Domain
      Properties:
        DomainName: 'stories'
        ElasticsearchVersion: '7.10'
        ElasticsearchClusterConfig:
          InstanceCount: '1'
          InstanceType: 't2.medium.elasticsearch'
        EBSOptions:
          EBSEnabled: true
          VolumeSize: '20'
          VolumeType: 'gp2'
        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                AWS: !GetAtt LambdaElasticSearchAccessRole.Arn
              Action: 'es:*'
              Resource:
                - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/stories/*'
              Condition: {
                IpAddress: {
                  aws:SourceIp: [
                    '81.154.88.33'
                  ]
                }
              }
            - Effect: 'Allow'
              Principal:
                AWS: '*'
              Action: 'es:ESHttp*'
              Resource:
                - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/stories/*'
              Condition: {
                IpAddress: {
                  aws:SourceIp: [
                    '92.22.57.82',
                    '80.7.89.82',
                    '192.0.2.0/24',
                    '81.154.88.33'
                  ]
                }
              }
        AdvancedOptions:
          rest.action.multi.allow_explicit_index: true